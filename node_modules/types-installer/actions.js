"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var Bluebird = require("bluebird");
var c = require("chalk");
var execa_1 = require("execa");
var inquirer = require("inquirer");
var path_1 = require("path");
function getDependencies(_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.selection, selection = _c === void 0 ? 'all' : _c, packageJson = _b.packageJson;
    packageJson = packageJson || require(path_1.join(process.cwd(), 'package.json'));
    var selections = {
        dependencies: packageJson.dependencies || {},
        devDependencies: packageJson.devDependencies || {},
        all: __assign({}, packageJson.devDependencies || {}, packageJson.dependencies || {}),
    };
    var selected = selections[selection];
    var keys = Object.keys(selected)
        .filter(function (key) { return !/^@types\//.test(key); });
    return { keys: keys, selected: selected, selections: selections };
}
exports.getDependencies = getDependencies;
function getYarnVersion() {
    return __awaiter(this, void 0, void 0, function () {
        var result, ex_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, execa_1.shell('yarn --version')];
                case 1:
                    result = _a.sent();
                    return [2 /*return*/, result.stdout];
                case 2:
                    ex_1 = _a.sent();
                    return [2 /*return*/, ''];
                case 3: return [2 /*return*/];
            }
        });
    });
}
/** @mything/banana becomes mything__banana */
var normalizeName = function (name) {
    return /^@/.test(name)
        ? name.slice(1).split('/').join('__')
        : name;
};
var getTypeDepName = function (name) { return "@types/" + normalizeName(name); };
function installTypes(dependencies, _a) {
    var selections = _a.selections, _b = _a.toDev, toDev = _b === void 0 ? false : _b, _c = _a.pwd, pwd = _c === void 0 ? '' : _c, _d = _a.concurrency, concurrency = _d === void 0 ? 1 : _d, packageManager = _a.packageManager;
    return __awaiter(this, void 0, void 0, function () {
        var installCommand, directory, installs;
        var _this = this;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0: return [4 /*yield*/, (function () { return __awaiter(_this, void 0, void 0, function () {
                        var _a;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    if (packageManager === 'pnpm') {
                                        return [2 /*return*/, 'pnpm install'];
                                    }
                                    _a = packageManager;
                                    if (_a) return [3 /*break*/, 2];
                                    return [4 /*yield*/, getYarnVersion()];
                                case 1:
                                    _a = ((_b.sent()) ? 'yarn' : 'npm');
                                    _b.label = 2;
                                case 2:
                                    packageManager = _a;
                                    if (packageManager === 'yarn') {
                                        return [2 /*return*/, 'yarn add'];
                                    }
                                    return [2 /*return*/, 'npm install'];
                            }
                        });
                    }); })()];
                case 1:
                    installCommand = _e.sent();
                    directory = pwd ? "cd " + pwd + " &&" : '';
                    return [4 /*yield*/, Bluebird.map(dependencies, function (actualName) { return __awaiter(_this, void 0, void 0, function () {
                            var typeDep, saveTo, stdout, err_1;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        typeDep = getTypeDepName(actualName);
                                        saveTo = toDev || (actualName in selections.devDependencies) ? '--dev' : '';
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, 3, , 4]);
                                        return [4 /*yield*/, execa_1.shell(directory + " " + installCommand + " " + saveTo + " " + typeDep, {
                                                env: __assign({}, process.env, { FORCE_COLOR: true }),
                                            })];
                                    case 2:
                                        stdout = (_a.sent()).stdout;
                                        console.log(c.green(typeDep), 'found');
                                        console.log('\n', stdout, '\n');
                                        return [3 /*break*/, 4];
                                    case 3:
                                        err_1 = _a.sent();
                                        console.log(c.yellow(typeDep), 'not found or failed to install');
                                        if (process.env.DEBUG) {
                                            console.error(c.red(err_1));
                                        }
                                        return [3 /*break*/, 4];
                                    case 4: return [2 /*return*/];
                                }
                            });
                        }); }, { concurrency: concurrency })];
                case 2:
                    installs = _e.sent();
                    return [2 /*return*/, installs];
            }
        });
    });
}
exports.installTypes = installTypes;
exports.install = function (_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.selection, selection = _c === void 0 ? 'all' : _c, _d = _b.toDev, toDev = _d === void 0 ? false : _d, _e = _b.deps, deps = _e === void 0 ? '' : _e;
    return __awaiter(_this, void 0, void 0, function () {
        var results, selections, keys;
        return __generator(this, function (_f) {
            switch (_f.label) {
                case 0:
                    if (deps) {
                        console.log("Installing dependency " + c.cyan.bold(deps || selection) + " in @types");
                    }
                    else {
                        console.log("Installing " + c.cyan.bold(selection) + " in @types");
                    }
                    results = getDependencies({ selection: selection });
                    selections = results.selections;
                    keys = results.keys;
                    if (deps) {
                        keys = keys.filter(function (key) { return key === deps; });
                    }
                    if (!keys.length) {
                        console.error(c.yellow('No dependencies to install'));
                        return [2 /*return*/];
                    }
                    return [4 /*yield*/, installTypes(keys, { toDev: toDev, selections: selections })];
                case 1:
                    _f.sent();
                    return [2 /*return*/];
            }
        });
    });
};
exports.interactiveInstall = function () { return __awaiter(_this, void 0, void 0, function () {
    var _a, selection, toDev, packageManager, _b, keys, selections, selectedKeys;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0: return [4 /*yield*/, inquirer.prompt([
                    {
                        type: 'list',
                        name: 'selection',
                        message: "Install options:",
                        default: 0,
                        choices: [
                            'all',
                            'dependencies',
                            'devDependencies',
                        ],
                    },
                    {
                        type: 'confirm',
                        name: 'toDev',
                        message: "Install all @types/* to " + c.cyan('devDependencies') + "?",
                        default: false,
                    },
                    {
                        type: 'list',
                        name: 'packageManager',
                        message: "Which package manager?:",
                        default: 'yarn',
                        choices: ['yarn', 'npm', 'pnpm'],
                    },
                ])];
            case 1:
                _a = _c.sent(), selection = _a.selection, toDev = _a.toDev, packageManager = _a.packageManager;
                _b = getDependencies({ selection: selection }), keys = _b.keys, selections = _b.selections;
                if (!keys.length) {
                    console.error(c.yellow('No dependencies to install'));
                    return [2 /*return*/];
                }
                console.log("Installing " + c.cyan.bold(selection) + " @type dependencies...");
                console.log();
                return [4 /*yield*/, inquirer.prompt([
                        {
                            type: 'checkbox',
                            name: 'selectedKeys',
                            message: 'select',
                            choices: keys.map(function (depName) {
                                var typeDep = getTypeDepName(depName);
                                var isAlreadyTyped = typeDep in selections.all;
                                return {
                                    name: depName + " " + (isAlreadyTyped ? c.grey("(Installed: " + typeDep + ")") : ''),
                                    value: depName,
                                    checked: true,
                                };
                            }),
                        },
                    ])];
            case 2:
                selectedKeys = (_c.sent()).selectedKeys;
                return [4 /*yield*/, installTypes(selectedKeys, { toDev: toDev, selections: selections, packageManager: packageManager })];
            case 3:
                _c.sent();
                return [2 /*return*/];
        }
    });
}); };
//# sourceMappingURL=data:application/json;base64,