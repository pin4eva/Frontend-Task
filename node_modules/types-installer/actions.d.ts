export interface IDependencies {
    [key: string]: string;
}
export interface ISelections {
    dependencies: IDependencies;
    devDependencies: IDependencies;
    all: IDependencies;
}
export declare function getDependencies({ selection, packageJson }?: {
    selection?: keyof ISelections;
    packageJson?: any;
}): {
    keys: string[];
    selected: IDependencies;
    selections: ISelections;
};
export interface IInstallOptions {
    toDev?: boolean;
    selection?: keyof ISelections;
    packageManager?: 'npm' | 'yarn' | 'pnpm';
    deps?: string;
}
export interface IInstallTypesOptions extends IInstallOptions {
    selections: ISelections;
    pwd?: string;
    concurrency?: number;
}
export declare function installTypes(dependencies: string[], { selections, toDev, pwd, concurrency, packageManager }: IInstallTypesOptions): Promise<void[]>;
export declare const install: ({ selection, toDev, deps }?: IInstallOptions) => Promise<void>;
export declare const interactiveInstall: () => Promise<void>;
